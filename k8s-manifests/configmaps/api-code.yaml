apiVersion: v1
kind: ConfigMap
metadata:
  name: api-code
  namespace: dashboard-app
data:
  server.js: |
    const express = require('express');
    const cors = require('cors');
    const bodyParser = require('body-parser');
    
    const app = express();
    const PORT = process.env.API_PORT || 3000;
    
    app.use(cors());
    app.use(bodyParser.json());
    
    // Przykladowe taski - tylko do testow, mozna usunac
    let tasks = [
      { id: 1, title: 'Get Crabbed', completed: true, priority: 'high' }
    ];
    
    app.get('/health', (req, res) => {
      res.json({ status: 'healthy', timestamp: new Date().toISOString() });
    });
    
    app.get('/ready', (req, res) => {
      res.json({ status: 'ready', timestamp: new Date().toISOString() });
    });
    
    // API endpoints
    app.get('/api/tasks', (req, res) => {
      res.json(tasks);
    });
    
    app.post('/api/tasks', (req, res) => {
      const newTask = {
        id: tasks.length + 1,
        title: req.body.title,
        completed: false,
        priority: req.body.priority || 'medium'
      };
      tasks.push(newTask);
      res.status(201).json(newTask);
    });
    
    app.put('/api/tasks/:id', (req, res) => {
      const id = parseInt(req.params.id);
      const taskIndex = tasks.findIndex(t => t.id === id);
      
      if (taskIndex !== -1) {
        tasks[taskIndex] = { ...tasks[taskIndex], ...req.body };
        res.json(tasks[taskIndex]);
      } else {
        res.status(404).json({ error: 'Task not found' });
      }
    });
    
    app.delete('/api/tasks/:id', (req, res) => {
      const id = parseInt(req.params.id);
      const taskIndex = tasks.findIndex(t => t.id === id);
      
      if (taskIndex !== -1) {
        const deletedTask = tasks.splice(taskIndex, 1)[0];
        res.json(deletedTask);
      } else {
        res.status(404).json({ error: 'Task not found' });
      }
    });
    
    app.get('/api/status', (req, res) => {
      res.json({
        services: {
          api: 'healthy',
          database: 'connected',
          cache: 'connected'
        },
        version: '1.0.0',
        uptime: process.uptime()
      });
    });
    
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`API Server running on port ${PORT}`);
    });
  
  package.json: |
    {
      "name": "dashboard-api",
      "version": "1.0.0",
      "description": "Personal Dashboard API",
      "main": "server.js",
      "scripts": {
        "start": "node server.js"
      },
      "dependencies": {
        "express": "^4.18.0",
        "cors": "^2.8.5",
        "body-parser": "^1.20.0",
        "pg": "^8.8.0",
        "redis": "^4.5.0"
      }
    }
